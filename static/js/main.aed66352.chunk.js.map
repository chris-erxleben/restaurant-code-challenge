{"version":3,"sources":["RestaurantsTableFooter.tsx","constants.ts","hooks/useRestaurants.ts","RestaurantsTable.tsx","RestaurantsTableFilters.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["PaginationWrapper","styled","div","PreviousButton","button","RestaurantsTableFooter","currentPage","totalResults","onPreviousPageClick","onNextPageClick","onClick","CONFIG","headers","Authorization","getRestaurants","a","axios","get","data","useRestaurants","useQuery","ClickableTableHeading","th","RestaurantsTable","selectedStateFilter","selectedGenreFilter","selectedAttireFilter","selectedSearchFilter","useState","filteredAndSortedRestaurants","setFilteredAndSortedRestaurants","setCurrentPage","selectedSortColumn","setSelectedSortColumn","selectedSortDirection","setSelectedSortDirection","restaurants","isFetching","useEffect","r","filter","state","attire","genre","split","includes","name","city","toLowerCase","some","g","sort","b","handleTableHeadClick","column","colSpan","length","slice","map","id","telephone","replace","FiltersWrapper","Select","select","Text","input","RestaurantsTableFilters","setSelectedStateFilter","setSelectedGenreFilter","setSelectedSearchFilter","setSelectedAttireFilter","states","setStates","genres","setGenres","attires","setAttires","searchValue","setSearchValue","distinctStates","Set","distinctGenres","distinctAttires","forEach","add","Array","from","htmlFor","value","onChange","target","index","type","onKeyPress","key","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","AppWrapper","App","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aed66352.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { PAGE_SIZE } from './constants'\n\ninterface Props {\n  currentPage: number\n  totalResults: number\n  onPreviousPageClick: () => void\n  onNextPageClick: () => void\n}\n\nconst PaginationWrapper = styled.div`\n  margin-top: 10px;\n`\n\nconst PreviousButton = styled.button`\n  margin-right: 5px;\n`\n\nconst RestaurantsTableFooter = ({\n  currentPage,\n  totalResults,\n  onPreviousPageClick,\n  onNextPageClick,\n}: Props) => (\n  <PaginationWrapper>\n    {currentPage > 0 ? (\n      <PreviousButton onClick={onPreviousPageClick}>\n        Previous Page\n      </PreviousButton>\n    ) : null}\n    {currentPage * PAGE_SIZE + PAGE_SIZE < totalResults ? (\n      <button onClick={onNextPageClick}>Next Page</button>\n    ) : null}\n  </PaginationWrapper>\n)\n\nexport default RestaurantsTableFooter\n","export const PAGE_SIZE = 10\n","import { useQuery } from 'react-query'\nimport axios from 'axios'\nimport { Restaurant } from '../types'\n\nconst RESTAURANTS_API =\n  'https://code-challenge.spectrumtoolbox.com/api/restaurants'\n\nconst CONFIG = {\n  headers: {\n    Authorization: 'Api-Key q3MNxtfep8Gt',\n  },\n}\n\nconst getRestaurants = async () => {\n  const { data } = await axios.get<Restaurant[]>(RESTAURANTS_API, CONFIG)\n  return data\n}\n\nconst useRestaurants = () => useQuery(['restaurants'], () => getRestaurants())\n\nexport default useRestaurants\n","import { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward'\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward'\nimport RestaurantsTableFooter from './RestaurantsTableFooter'\nimport useRestaurants from './hooks/useRestaurants'\nimport { PAGE_SIZE } from './constants'\nimport { Restaurant } from './types'\n\ninterface Props {\n  selectedStateFilter: string\n  selectedGenreFilter: string\n  selectedAttireFilter: string\n  selectedSearchFilter: string\n}\n\ntype SelectedSortColumn = 'name' | 'city' | 'state' | 'attire'\n\ntype SelectedSortDirection = 'asc' | 'desc'\n\nconst ClickableTableHeading = styled.th`\n  cursor: pointer;\n`\n\nconst RestaurantsTable = ({\n  selectedStateFilter,\n  selectedGenreFilter,\n  selectedAttireFilter,\n  selectedSearchFilter,\n}: Props) => {\n  const [\n    filteredAndSortedRestaurants,\n    setFilteredAndSortedRestaurants,\n  ] = useState<Restaurant[]>([])\n  const [currentPage, setCurrentPage] = useState(0)\n  const [\n    selectedSortColumn,\n    setSelectedSortColumn,\n  ] = useState<SelectedSortColumn>('name')\n  const [\n    selectedSortDirection,\n    setSelectedSortDirection,\n  ] = useState<SelectedSortDirection>('asc')\n  const { data: restaurants, isFetching } = useRestaurants()\n  useEffect(() => {\n    if (restaurants) {\n      let r = restaurants\n      if (selectedStateFilter !== 'all') {\n        r = r.filter(({ state }) => state === selectedStateFilter)\n      }\n      if (selectedAttireFilter !== 'all') {\n        r = r.filter(({ attire }) => attire === selectedAttireFilter)\n      }\n      if (selectedGenreFilter !== 'all') {\n        r = r.filter(({ genre }) =>\n          genre.split(',').includes(selectedGenreFilter)\n        )\n      }\n      if (selectedSearchFilter !== '') {\n        r = r.filter(\n          ({ name, city, genre }) =>\n            name.toLowerCase().includes(selectedSearchFilter.toLowerCase()) ||\n            city.toLowerCase().includes(selectedSearchFilter.toLowerCase()) ||\n            genre\n              .split(',')\n              .some((g) =>\n                g.toLowerCase().includes(selectedSearchFilter.toLowerCase())\n              )\n        )\n      }\n      r = r.sort((a, b) => {\n        if (\n          a[selectedSortColumn].toLowerCase() <\n          b[selectedSortColumn].toLowerCase()\n        ) {\n          return selectedSortDirection === 'asc' ? -1 : 1\n        } else if (\n          a[selectedSortColumn].toLowerCase() >\n          b[selectedSortColumn].toLowerCase()\n        ) {\n          return selectedSortDirection === 'asc' ? 1 : -1\n        }\n        return 0\n      })\n      setCurrentPage(0)\n      setFilteredAndSortedRestaurants(r)\n    }\n  }, [\n    restaurants,\n    selectedStateFilter,\n    selectedGenreFilter,\n    selectedAttireFilter,\n    selectedSearchFilter,\n    selectedSortColumn,\n    selectedSortDirection,\n  ])\n\n  const onPreviousPageClick = () => {\n    setCurrentPage(currentPage - 1)\n  }\n\n  const onNextPageClick = () => {\n    setCurrentPage(currentPage + 1)\n  }\n\n  const handleTableHeadClick = (column: SelectedSortColumn) => {\n    if (column === selectedSortColumn) {\n      setSelectedSortDirection(selectedSortDirection === 'asc' ? 'desc' : 'asc')\n    } else {\n      setSelectedSortColumn(column)\n      setSelectedSortDirection('asc')\n    }\n  }\n\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            <ClickableTableHeading onClick={() => handleTableHeadClick('name')}>\n              Name{' '}\n              {selectedSortColumn === 'name' ? (\n                selectedSortDirection === 'asc' ? (\n                  <ArrowUpwardIcon />\n                ) : (\n                  <ArrowDownwardIcon />\n                )\n              ) : null}\n            </ClickableTableHeading>\n            <ClickableTableHeading onClick={() => handleTableHeadClick('city')}>\n              City{' '}\n              {selectedSortColumn === 'city' ? (\n                selectedSortDirection === 'asc' ? (\n                  <ArrowUpwardIcon />\n                ) : (\n                  <ArrowDownwardIcon />\n                )\n              ) : null}\n            </ClickableTableHeading>\n            <ClickableTableHeading\n              onClick={() => handleTableHeadClick('state')}\n            >\n              State{' '}\n              {selectedSortColumn === 'state' ? (\n                selectedSortDirection === 'asc' ? (\n                  <ArrowUpwardIcon />\n                ) : (\n                  <ArrowDownwardIcon />\n                )\n              ) : null}\n            </ClickableTableHeading>\n            <th>Phone Number</th>\n            <ClickableTableHeading\n              onClick={() => handleTableHeadClick('attire')}\n            >\n              Attire{' '}\n              {selectedSortColumn === 'attire' ? (\n                selectedSortDirection === 'asc' ? (\n                  <ArrowUpwardIcon />\n                ) : (\n                  <ArrowDownwardIcon />\n                )\n              ) : null}\n            </ClickableTableHeading>\n            <th>Genres</th>\n          </tr>\n        </thead>\n        <tbody>\n          {isFetching ? (\n            <tr>\n              <td colSpan={6}>Loading...</td>\n            </tr>\n          ) : filteredAndSortedRestaurants &&\n            filteredAndSortedRestaurants.length ? (\n            filteredAndSortedRestaurants\n              .slice(\n                currentPage * PAGE_SIZE,\n                currentPage * PAGE_SIZE + PAGE_SIZE\n              )\n              .map(({ id, name, city, state, telephone, attire, genre }) => (\n                <tr key={id}>\n                  <td>{name}</td>\n                  <td>{city}</td>\n                  <td>{state}</td>\n                  <td>{telephone}</td>\n                  <td>{attire}</td>\n                  <td>{genre.replace(/,/g, ', ')}</td>\n                </tr>\n              ))\n          ) : (\n            <tr>\n              <td colSpan={6}>No results found...</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <RestaurantsTableFooter\n        currentPage={currentPage}\n        totalResults={filteredAndSortedRestaurants.length}\n        onNextPageClick={onNextPageClick}\n        onPreviousPageClick={onPreviousPageClick}\n      />\n    </>\n  )\n}\n\nexport default RestaurantsTable\n","import useRestaurants from './hooks/useRestaurants'\nimport { useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  selectedStateFilter: string\n  selectedGenreFilter: string\n  selectedAttireFilter: string\n  setSelectedStateFilter: (state: string) => void\n  setSelectedGenreFilter: (genre: string) => void\n  setSelectedAttireFilter: (attire: string) => void\n  setSelectedSearchFilter: (search: string) => void\n}\n\nconst FiltersWrapper = styled.div`\n  padding-top: 15px;\n  padding-bottom: 15px;\n`\n\nconst Select = styled.select`\n  min-width: 150px;\n  margin-left: 5px;\n  margin-right: 15px;\n`\n\nconst Text = styled.input`\n  min-width: 200px;\n  margin-left: 5px;\n  margin-right: 2px;\n`\n\nconst RestaurantsTableFilters = ({\n  selectedStateFilter,\n  selectedGenreFilter,\n  selectedAttireFilter,\n  setSelectedStateFilter,\n  setSelectedGenreFilter,\n  setSelectedSearchFilter,\n  setSelectedAttireFilter,\n}: Props) => {\n  const [states, setStates] = useState<string[]>([])\n  const [genres, setGenres] = useState<string[]>([])\n  const [attires, setAttires] = useState<string[]>([])\n  const [searchValue, setSearchValue] = useState<string>('')\n  const { data: restaurants } = useRestaurants()\n  useEffect(() => {\n    if (restaurants) {\n      const distinctStates = new Set<string>()\n      const distinctGenres = new Set<string>()\n      const distinctAttires = new Set<string>()\n\n      restaurants.forEach(({ state, genre, attire }) => {\n        distinctStates.add(state)\n        distinctAttires.add(attire)\n        genre.split(',').forEach((g) => {\n          distinctGenres.add(g)\n        })\n      })\n\n      setStates(Array.from(distinctStates))\n      setGenres(Array.from(distinctGenres))\n      setAttires(Array.from(distinctAttires))\n    }\n  }, [restaurants])\n\n  const handleStateFilterChange = ({ target: { value } }) => {\n    setSelectedStateFilter(value)\n  }\n\n  const handleGenreFilterChange = ({ target: { value } }) => {\n    setSelectedGenreFilter(value)\n  }\n\n  const handleAttireFilterChange = ({ target: { value } }) => {\n    setSelectedAttireFilter(value)\n  }\n\n  const handleSearchKeyPress = ({ key }) => {\n    if (key === 'Enter') {\n      setSelectedSearchFilter(searchValue)\n    }\n  }\n\n  const handleSearchClick = () => {\n    setSelectedSearchFilter(searchValue)\n  }\n\n  const handleSearchChange = ({ target: { value } }) => {\n    setSearchValue(value)\n  }\n\n  return (\n    <FiltersWrapper>\n      <label htmlFor=\"state-filter\">State:</label>\n      <Select\n        name=\"states\"\n        id=\"state-filter\"\n        value={selectedStateFilter}\n        onChange={handleStateFilterChange}\n      >\n        <option value=\"all\">All</option>\n        {states.map((state, index) => (\n          <option key={index} value={state}>\n            {state}\n          </option>\n        ))}\n      </Select>\n      <label htmlFor=\"genre-filter\">Genre:</label>\n      <Select\n        name=\"genres\"\n        id=\"genre-filter\"\n        value={selectedGenreFilter}\n        onChange={handleGenreFilterChange}\n      >\n        <option value=\"all\">All</option>\n        {genres.map((genre, index) => (\n          <option key={index} value={genre}>\n            {genre}\n          </option>\n        ))}\n      </Select>\n      <label htmlFor=\"attire-filter\">Attire:</label>\n      <Select\n        name=\"attires\"\n        id=\"attire-filter\"\n        value={selectedAttireFilter}\n        onChange={handleAttireFilterChange}\n      >\n        <option value=\"all\">All</option>\n        {attires.map((attire, index) => (\n          <option key={index} value={attire}>\n            {attire}\n          </option>\n        ))}\n      </Select>\n      <label htmlFor=\"search-filter\">Search:</label>\n      <Text\n        type=\"text\"\n        onKeyPress={handleSearchKeyPress}\n        value={searchValue}\n        onChange={handleSearchChange}\n      />\n      <button onClick={handleSearchClick}>Search</button>\n    </FiltersWrapper>\n  )\n}\n\nexport default RestaurantsTableFilters\n","import { QueryClient, QueryClientProvider } from 'react-query'\nimport RestaurantsTable from './RestaurantsTable'\nimport RestaurantsTableFilters from './RestaurantsTableFilters'\nimport { useState } from 'react'\nimport styled from 'styled-components'\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n    },\n  },\n})\n\nconst AppWrapper = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n`\n\nconst App = () => {\n  const [selectedStateFilter, setSelectedStateFilter] = useState<string>('all')\n  const [selectedGenreFilter, setSelectedGenreFilter] = useState<string>('all')\n  const [selectedAttireFilter, setSelectedAttireFilter] = useState<string>(\n    'all'\n  )\n  const [selectedSearchFilter, setSelectedSearchFilter] = useState<string>('')\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppWrapper>\n        <RestaurantsTableFilters\n          selectedStateFilter={selectedStateFilter}\n          selectedGenreFilter={selectedGenreFilter}\n          selectedAttireFilter={selectedAttireFilter}\n          setSelectedStateFilter={setSelectedStateFilter}\n          setSelectedGenreFilter={setSelectedGenreFilter}\n          setSelectedAttireFilter={setSelectedAttireFilter}\n          setSelectedSearchFilter={setSelectedSearchFilter}\n        />\n        <RestaurantsTable\n          selectedStateFilter={selectedStateFilter}\n          selectedGenreFilter={selectedGenreFilter}\n          selectedSearchFilter={selectedSearchFilter}\n          selectedAttireFilter={selectedAttireFilter}\n        />\n      </AppWrapper>\n    </QueryClientProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}